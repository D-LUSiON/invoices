{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","external \"ng.common\"","external \"ng.forms\"","external \"rxjs\"","external \"shared\"","external \"ng.core\"","./src/app/providers/views/providers-list/providers-list.component.ts","./src/app/providers/views/provider-preview/provider-preview.component.ts","./src/app/providers/views/provider-edit/provider-edit.component.ts","./src/app/providers/models/provider.ts","./src/app/providers/providers.module.ts","d:/sandbox/invoices/src/app/services/app-state.service.ts","d:/sandbox/invoices/src/app/services/app-state.service.ts.pre-build-optimizer.js","./src/app/providers/views/providers-list/providers-list.component.ngfactory.js.pre-build-optimizer.js","./src/app/providers/views/providers-list/providers-list.component.scss.shim.ngstyle.js.pre-build-optimizer.js","./src/app/providers/views/providers-list/providers-list.component.html","./src/app/providers/views/provider-preview/provider-preview.component.ngfactory.js.pre-build-optimizer.js","./src/app/providers/views/provider-preview/provider-preview.component.scss.shim.ngstyle.js.pre-build-optimizer.js","./src/app/providers/views/provider-preview/provider-preview.component.html","./src/app/providers/views/provider-edit/provider-edit.component.ngfactory.js.pre-build-optimizer.js","./src/app/providers/views/provider-edit/provider-edit.component.scss.shim.ngstyle.js.pre-build-optimizer.js","./src/app/providers/views/provider-edit/provider-edit.component.html","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/isFunction.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/config.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/hostReportError.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/Observer.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/isArray.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/isObject.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/Subscription.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/Subscriber.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/InnerSubscriber.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/symbol/observable.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/noop.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/Observable.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/toSubscriber.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/canReportError.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/pipe.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/symbol/iterator.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/isArrayLike.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/isPromise.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeTo.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/OuterSubscriber.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/operators/map.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/operators/mergeMap.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/operators/filter.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/@angular/common/fesm2015/http.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/observable/from.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/rxjs/_esm2015/internal/operators/concatMap.js.pre-build-optimizer.js","d:/sandbox/invoices/node_modules/ngx-electron/fesm2015/ngx-electron.js.pre-build-optimizer.js","./src/app/providers/providers.module.ngfactory.js.pre-build-optimizer.js","./src/main.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0S4P__","__WEBPACK_EXTERNAL_MODULE__3xDq__","__WEBPACK_EXTERNAL_MODULE_Vgaj__","__WEBPACK_EXTERNAL_MODULE_cfyg__","__WEBPACK_EXTERNAL_MODULE_vOrQ__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ProvidersListComponent","_appState","hello","ProviderPreviewComponent","ProviderEditComponent","Provider","data","organization","acc_person","address","vat","vat2","id","ProvidersModule","title","description","icon","listComponent","previewComponent","editComponent","AppStateService","console","log","message","ngInjectableDef","token","providedIn","RenderType_ProvidersListComponent","encapsulation","styles","View_ProvidersListComponent_0","_l","View_ProvidersListComponent_Host_0","_ck","_v","ProvidersListComponentNgFactory","RenderType_ProviderPreviewComponent","View_ProviderPreviewComponent_0","View_ProviderPreviewComponent_Host_0","ProviderPreviewComponentNgFactory","RenderType_ProviderEditComponent","View_ProviderEditComponent_0","View_ProviderEditComponent_Host_0","ProviderEditComponentNgFactory","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","error","Error","warn","stack","hostReportError","err","setTimeout","empty","closed","useDeprecatedSynchronousErrorHandling","isArray","Array","length","isObject","UnsubscriptionErrorImpl","errors","map","toString","join","UnsubscriptionError","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","e","flattenUnsubscriptionErrors","sub","concat","push","teardown","subscription","tmp","EMPTY","_addParent","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Math","random","destinationOrNext","complete","super","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","destination","add","next","subscriber","_next","_error","_complete","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","observable","noop","Observable","subscribe","_isScalar","_subscribe","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","promiseCtor","getPromiseCtor","resolve","reject","operations","fns","input","prev","subscribeToArray","array","subscribeToPromise","promise","then","getSymbolIterator","iterator","subscribeToIterable","iterable","item","done","return","subscribeToObservable","obj","obs","TypeError","isArrayLike","isPromise","subscribeTo","result","innerValue","innerIndex","innerSub","project","thisArg","lift","MapOperator","count","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","outerSubscriber","subscribeToResult","shift","FilterOperator","predicate","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","slice","toLowerCase","trim","maybeSetNormalizedName","has","set","keys","values","init","from","clone","op","lcName","copyFrom","update","applyUpdate","other","base","toDelete","existing","filter","delete","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","param","eqIdx","val","decodeKey","decodeValue","list","paramParser","res","eKey","encodeKey","encodeValue","idx","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","params","urlWithParams","qIdx","JSON","stringify","type","setHeaders","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","addBody","observe","handler","first","req","events$","pipe","mergeMap","resultSelector","a","scheduler","b","ii","handle","res$","event","request","callbackParam","append","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","XMLHttpRequest","xhrFactory","xhr","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","getResponseUrl","onLoad","response","responseText","originalBody","parse","text","onError","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","addEventListener","upload","send","removeEventListener","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientModule","ElectronService","_electron","window","navigator","userAgent","match","isElectronApp","process","arch","electron","desktopCapturer","ipcRenderer","remote","webFrame","clipboard","crashReporter","nativeImage","screen","shell","ElectronServiceRef","NgxElectronModule","ProvidersModuleNgFactory","p0_0"],"mappings":"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","file":"providers.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ng.common\"), require(\"ng.forms\"), require(\"rxjs\"), require(\"shared\"), require(\"ng.core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ng.common\", \"ng.forms\", \"rxjs\", \"shared\", \"ng.core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"providers\"] = factory(require(\"ng.common\"), require(\"ng.forms\"), require(\"rxjs\"), require(\"shared\"), require(\"ng.core\"));\n\telse\n\t\troot[\"providers\"] = factory(root[\"ng.common\"], root[\"ng.forms\"], root[\"rxjs\"], root[\"shared\"], root[\"ng.core\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__0S4P__, __WEBPACK_EXTERNAL_MODULE__3xDq__, __WEBPACK_EXTERNAL_MODULE_Vgaj__, __WEBPACK_EXTERNAL_MODULE_cfyg__, __WEBPACK_EXTERNAL_MODULE_vOrQ__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0S4P__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3xDq__;","module.exports = __WEBPACK_EXTERNAL_MODULE_Vgaj__;","module.exports = __WEBPACK_EXTERNAL_MODULE_cfyg__;","module.exports = __WEBPACK_EXTERNAL_MODULE_vOrQ__;","import { Component, OnInit } from '@angular/core';\nimport { AppStateService } from '@app/services';\n\n@Component({\n    selector: 'app-providers-list',\n    templateUrl: './providers-list.component.html',\n    styleUrls: ['./providers-list.component.scss']\n})\nexport class ProvidersListComponent implements OnInit {\n\n    constructor(\n        private _appState: AppStateService,\n    ) { }\n\n    ngOnInit() {\n        this._appState.hello('Hello from providers-list.component!');\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AppStateService } from '@app/services';\n\n@Component({\n    selector: 'app-provider-preview',\n    templateUrl: './provider-preview.component.html',\n    styleUrls: ['./provider-preview.component.scss']\n})\nexport class ProviderPreviewComponent implements OnInit {\n\n    constructor(\n        private _appState: AppStateService,\n    ) { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AppStateService } from '@app/services';\n\n@Component({\n    selector: 'app-provider-edit',\n    templateUrl: './provider-edit.component.html',\n    styleUrls: ['./provider-edit.component.scss']\n})\nexport class ProviderEditComponent implements OnInit {\n\n    constructor(\n        private _appState: AppStateService,\n    ) { }\n\n    ngOnInit() {\n    }\n\n}\n","export class Provider {\n    id: string; // RethinkDB ID\n    organization: string = '';\n    acc_person: string = '';\n    address: string = '';\n    vat: string = '';\n    vat2: string = '';\n\n    constructor(data?) {\n        if (data) {\n            if (data.hasOwnProperty('id')) this.id = data.id;\n            if (data.hasOwnProperty('organization')) this.organization = data.organization;\n            if (data.hasOwnProperty('acc_person')) this.acc_person = data.acc_person;\n            if (data.hasOwnProperty('address')) this.address = data.address;\n            if (data.hasOwnProperty('vat')) this.vat = data.vat;\n            if (data.hasOwnProperty('vat2')) this.vat2 = data.vat2;\n        }\n    }\n\n    raw() {\n        return {\n            organization: this.organization,\n            acc_person: this.acc_person,\n            address: this.address,\n            vat: this.vat,\n            vat2: this.vat2,\n        };\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProvidersListComponent } from './views/providers-list/providers-list.component';\nimport { ProviderPreviewComponent } from './views/provider-preview/provider-preview.component';\nimport { ProviderEditComponent } from './views/provider-edit/provider-edit.component';\nimport { SharedModule } from 'shared';\n\nexport * from './models';\n\n@NgModule({\n    declarations: [\n        ProvidersListComponent,\n        ProviderPreviewComponent,\n        ProviderEditComponent\n    ],\n    imports: [\n        CommonModule,\n        SharedModule.forRoot()\n    ],\n    exports: [\n        ProvidersListComponent,\n        ProviderPreviewComponent,\n        ProviderEditComponent\n    ],\n    entryComponents: [\n        ProvidersListComponent,\n        ProviderPreviewComponent,\n        ProviderEditComponent\n    ],\n})\nexport class ProvidersModule {\n    static title = 'Providers';\n    static description = 'Providers module for listing, previewing and editing';\n    static icon = 'address-book';\n\n    static listComponent = ProvidersListComponent;\n    static previewComponent = ProviderPreviewComponent;\n    static editComponent = ProviderEditComponent;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppStateService {\n    constructor() {\n        console.log(`Hello from core app AppState service`);\n    }\n\n    hello(message: string) {\n        console.log(message);\n    }\n}\n","import * as i0 from \"@angular/core\";\nexport class AppStateService {\n    constructor() {\n        console.log(`Hello from core app AppState service`);\n    }\n    hello(message) {\n        console.log(message);\n    }\n}\nAppStateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AppStateService_Factory() { return new AppStateService(); }, token: AppStateService, providedIn: \"root\" });\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./providers-list.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"./providers-list.component\";\nimport * as i3 from \"../../../../../../../src/app/services/app-state.service\";\nvar styles_ProvidersListComponent = [i0.styles];\nvar RenderType_ProvidersListComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_ProvidersListComponent, data: {} });\nexport { RenderType_ProvidersListComponent as RenderType_ProvidersListComponent };\nexport function View_ProvidersListComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"providers-list works!\"]))], null, null); }\nexport function View_ProvidersListComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-providers-list\", [], null, null, null, View_ProvidersListComponent_0, RenderType_ProvidersListComponent)), i1.ɵdid(1, 114688, null, 0, i2.ProvidersListComponent, [i3.AppStateService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar ProvidersListComponentNgFactory = i1.ɵccf(\"app-providers-list\", i2.ProvidersListComponent, View_ProvidersListComponent_Host_0, {}, {}, []);\nexport { ProvidersListComponentNgFactory as ProvidersListComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\"];\nexport { styles as styles };\n","<p>providers-list works!</p>\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./provider-preview.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"./provider-preview.component\";\nimport * as i3 from \"../../../../../../../src/app/services/app-state.service\";\nvar styles_ProviderPreviewComponent = [i0.styles];\nvar RenderType_ProviderPreviewComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_ProviderPreviewComponent, data: {} });\nexport { RenderType_ProviderPreviewComponent as RenderType_ProviderPreviewComponent };\nexport function View_ProviderPreviewComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"provider-preview works!\"]))], null, null); }\nexport function View_ProviderPreviewComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-provider-preview\", [], null, null, null, View_ProviderPreviewComponent_0, RenderType_ProviderPreviewComponent)), i1.ɵdid(1, 114688, null, 0, i2.ProviderPreviewComponent, [i3.AppStateService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar ProviderPreviewComponentNgFactory = i1.ɵccf(\"app-provider-preview\", i2.ProviderPreviewComponent, View_ProviderPreviewComponent_Host_0, {}, {}, []);\nexport { ProviderPreviewComponentNgFactory as ProviderPreviewComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\"];\nexport { styles as styles };\n","<p>provider-preview works!</p>\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./provider-edit.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"./provider-edit.component\";\nimport * as i3 from \"../../../../../../../src/app/services/app-state.service\";\nvar styles_ProviderEditComponent = [i0.styles];\nvar RenderType_ProviderEditComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_ProviderEditComponent, data: {} });\nexport { RenderType_ProviderEditComponent as RenderType_ProviderEditComponent };\nexport function View_ProviderEditComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"provider-edit works!\"]))], null, null); }\nexport function View_ProviderEditComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-provider-edit\", [], null, null, null, View_ProviderEditComponent_0, RenderType_ProviderEditComponent)), i1.ɵdid(1, 114688, null, 0, i2.ProviderEditComponent, [i3.AppStateService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar ProviderEditComponentNgFactory = i1.ɵccf(\"app-provider-edit\", i2.ProviderEditComponent, View_ProviderEditComponent_Host_0, {}, {}, []);\nexport { ProviderEditComponentNgFactory as ProviderEditComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\"];\nexport { styles as styles };\n","<p>provider-edit works!</p>\n","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\n//# sourceMappingURL=isArray.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                hasErrors = true;\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                if (!teardown) {\n                    return Subscription.EMPTY;\n                }\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        if (subscription._addParent(this)) {\n            const subscriptions = this._subscriptions;\n            if (subscriptions) {\n                subscriptions.push(subscription);\n            }\n            else {\n                this._subscriptions = [subscription];\n            }\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (_parent === parent) {\n            return false;\n        }\n        else if (!_parent) {\n            this._parent = parent;\n            return true;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n            return true;\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n            return true;\n        }\n        return false;\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","export const rxSubscriber = typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parent, _parents } = this;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","import { Subscriber } from './Subscriber';\nexport class InnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=InnerSubscriber.js.map","export const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    if (!subscriber.closed) {\n        subscriber.complete();\n    }\n};\n//# sourceMappingURL=subscribeToArray.js.map","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        const item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","import { Subscriber } from './Subscriber';\nexport class OuterSubscriber extends Subscriber {\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error, innerSub) {\n        this.destination.error(error);\n    }\n    notifyComplete(innerSub) {\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=OuterSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeMap.js.map","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)) {\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map","import { mergeMap } from './mergeMap';\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map","import { Injectable, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ElectronService {\n    /**\n     * @private\n     * @return {?}\n     */\n    get electron() {\n        if (!this._electron) {\n            if (window && window.require) {\n                this._electron = window.require('electron');\n                return this._electron;\n            }\n            return null;\n        }\n        return this._electron;\n    }\n    /**\n     * determines if SPA is running in Electron\n     * @return {?}\n     */\n    get isElectronApp() {\n        return !!window.navigator.userAgent.match(/Electron/);\n    }\n    /**\n     * @return {?}\n     */\n    get isMacOS() {\n        return this.isElectronApp && process.platform === 'darwin';\n    }\n    /**\n     * @return {?}\n     */\n    get isWindows() {\n        return this.isElectronApp && process.platform === 'win32';\n    }\n    /**\n     * @return {?}\n     */\n    get isLinux() {\n        return this.isElectronApp && process.platform === 'linux';\n    }\n    /**\n     * @return {?}\n     */\n    get isX86() {\n        return this.isElectronApp && process.arch === 'ia32';\n    }\n    /**\n     * @return {?}\n     */\n    get isX64() {\n        return this.isElectronApp && process.arch === 'x64';\n    }\n    /**\n     * @return {?}\n     */\n    get isArm() {\n        return this.isElectronApp && process.arch === 'arm';\n    }\n    /**\n     * @return {?}\n     */\n    get desktopCapturer() {\n        return this.electron ? this.electron.desktopCapturer : null;\n    }\n    /**\n     * @return {?}\n     */\n    get ipcRenderer() {\n        return this.electron ? this.electron.ipcRenderer : null;\n    }\n    /**\n     * @return {?}\n     */\n    get remote() {\n        return this.electron ? this.electron.remote : null;\n    }\n    /**\n     * @return {?}\n     */\n    get webFrame() {\n        return this.electron ? this.electron.webFrame : null;\n    }\n    /**\n     * @return {?}\n     */\n    get clipboard() {\n        return this.electron ? this.electron.clipboard : null;\n    }\n    /**\n     * @return {?}\n     */\n    get crashReporter() {\n        return this.electron ? this.electron.crashReporter : null;\n    }\n    /**\n     * @return {?}\n     */\n    get process() {\n        return this.remote ? this.remote.process : null;\n    }\n    /**\n     * @return {?}\n     */\n    get nativeImage() {\n        return this.electron ? this.electron.nativeImage : null;\n    }\n    /**\n     * @return {?}\n     */\n    get screen() {\n        return this.electron ? this.remote.screen : null;\n    }\n    /**\n     * @return {?}\n     */\n    get shell() {\n        return this.electron ? this.electron.shell : null;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ElectronService.prototype._electron;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ElectronServiceRef extends ElectronService {\n    constructor() {\n        super();\n    }\n}\nElectronServiceRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nElectronServiceRef.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxElectronModule {\n}\nNgxElectronModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [],\n                exports: [],\n                providers: [{ provide: ElectronService, useClass: ElectronServiceRef }]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ElectronService, ElectronServiceRef, NgxElectronModule };\n//# sourceMappingURL=ngx-electron.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./providers.module\";\nimport * as i2 from \"./views/providers-list/providers-list.component.ngfactory\";\nimport * as i3 from \"./views/provider-preview/provider-preview.component.ngfactory\";\nimport * as i4 from \"./views/provider-edit/provider-edit.component.ngfactory\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/common/http\";\nimport * as i7 from \"ngx-electron\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"shared\";\nvar ProvidersModuleNgFactory = i0.ɵcmf(i1.ProvidersModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ProvidersListComponentNgFactory, i3.ProviderPreviewComponentNgFactory, i4.ProviderEditComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i5.NgLocalization, i5.NgLocaleLocalization, [i0.LOCALE_ID, [2, i5.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i6.HttpXsrfTokenExtractor, i6.ɵangular_packages_common_http_http_g, [i5.DOCUMENT, i0.PLATFORM_ID, i6.ɵangular_packages_common_http_http_e]), i0.ɵmpd(4608, i6.ɵangular_packages_common_http_http_h, i6.ɵangular_packages_common_http_http_h, [i6.HttpXsrfTokenExtractor, i6.ɵangular_packages_common_http_http_f]), i0.ɵmpd(5120, i6.HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [i6.ɵangular_packages_common_http_http_h]), i0.ɵmpd(4608, i6.ɵangular_packages_common_http_http_d, i6.ɵangular_packages_common_http_http_d, []), i0.ɵmpd(6144, i6.XhrFactory, null, [i6.ɵangular_packages_common_http_http_d]), i0.ɵmpd(4608, i6.HttpXhrBackend, i6.HttpXhrBackend, [i6.XhrFactory]), i0.ɵmpd(6144, i6.HttpBackend, null, [i6.HttpXhrBackend]), i0.ɵmpd(4608, i6.HttpHandler, i6.ɵHttpInterceptingHandler, [i6.HttpBackend, i0.Injector]), i0.ɵmpd(4608, i6.HttpClient, i6.HttpClient, [i6.HttpHandler]), i0.ɵmpd(4608, i7.ElectronService, i7.ElectronServiceRef, []), i0.ɵmpd(4608, i8.FormBuilder, i8.FormBuilder, []), i0.ɵmpd(4608, i8.ɵangular_packages_forms_forms_o, i8.ɵangular_packages_forms_forms_o, []), i0.ɵmpd(1073742336, i5.CommonModule, i5.CommonModule, []), i0.ɵmpd(1073742336, i6.HttpClientXsrfModule, i6.HttpClientXsrfModule, []), i0.ɵmpd(1073742336, i6.HttpClientModule, i6.HttpClientModule, []), i0.ɵmpd(1073742336, i7.NgxElectronModule, i7.NgxElectronModule, []), i0.ɵmpd(1073742336, i8.ɵangular_packages_forms_forms_d, i8.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i8.ReactiveFormsModule, i8.ReactiveFormsModule, []), i0.ɵmpd(1073742336, i8.FormsModule, i8.FormsModule, []), i0.ɵmpd(1073742336, i9.SharedModule, i9.SharedModule, []), i0.ɵmpd(1073742336, i1.ProvidersModule, i1.ProvidersModule, []), i0.ɵmpd(256, i6.ɵangular_packages_common_http_http_e, \"XSRF-TOKEN\", []), i0.ɵmpd(256, i6.ɵangular_packages_common_http_http_f, \"X-XSRF-TOKEN\", [])]); });\nexport { ProvidersModuleNgFactory as ProvidersModuleNgFactory };\n","\n       export * from './app/providers/providers.module';\n       export * from './app/providers/providers.module.ngfactory';\n       import { ProvidersModuleNgFactory } from './app/providers/providers.module.ngfactory';\n       export default ProvidersModuleNgFactory;\n    "],"sourceRoot":"webpack:///"}